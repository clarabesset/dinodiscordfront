{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Documents/front dino/src/auth/Guard.jsx\";\nimport React from \"react\";\nimport axios from \"axios\"; // let's create a api handler for auth purposes\n// notice withCredentials option\n// this will allow axios to send the auth cookie, provided by express, with each request\n\nconst apiAuthHandler = axios.create({\n  withCredentials: true,\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\n/*\nFrom  React doc : https://reactjs.org/docs/context.html#when-to-use-context\n---------------------------------\nIn a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\n---------------------------------\nContext is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:\n*/\n\nconst AuthContext = React.createContext(); // Basics Context concepts\n// createContext() — return 2 components : Provider and Consumer.\n// Provider — Component exposing data changes to subscribed Consumers\n// Consumer — Component subscribed to a Provider\n\nclass AuthProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.isLoggedIn = () => {\n      apiAuthHandler.get(\"/loggedin\", null).then(serverRes => {\n        // server accepted the request (this user is stored into session)\n        // let's update the state loginStatus + user key/value pairs\n        this.updateState(serverRes.data);\n      }).catch(serverErr => {\n        // console.error(serverErr);\n        this.setState({\n          loginStatus: false\n        });\n      });\n    };\n\n    this.signin = (clbk, data) => {\n      apiAuthHandler.post(\"/signin\", data).then(async serverRes => {\n        // once loggedin, the state is updated =>\n        // this will prevent the ProtectedRoute component redirect to /signin\n        // check src/auth/ProtectedRoute.js\n        await this.updateState(serverRes.data); // wait state update\n        // then ... exec the callback (leading to a redirect)\n\n        clbk(serverRes.data.loginStatus);\n      }).catch(serverErr => this.setState({\n        isLoggedIn: false\n      }));\n    };\n\n    this.signout = clbk => {\n      // send a request to the server : session will be destroyed there\n      apiAuthHandler.post(\"/logout\").then(serverRes => {\n        this.setState({\n          loginStatus: false\n        }, () => clbk(this.isLoggedIn));\n      });\n    };\n\n    this.state = {\n      loginStatus: {},\n      // by default, user is not signed-in...\n      // i started with a false value but then ...\n      // i've put an object literal here just to avoid a weird refresh bug ... still investigating\n      user: null\n    };\n  }\n\n  componentDidMount() {\n    this.isLoggedIn(); // check if user is signed-in when AuthConsumer is mounted\n  } // check mdn @ : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/get\n\n\n  get user() {\n    return this.state.user;\n  }\n\n  updateState(data) {\n    const loginStatus = data.loginStatus,\n          user = data.user;\n    this.setState({\n      loginStatus: loginStatus,\n      user: user\n    });\n  }\n\n  render() {\n    // return a context Provider ...\n    return React.createElement(AuthContext.Provider, {\n      // below, the values exposed by the provider (to be consumed later ;)\n      value: {\n        // exposed properties\n        user: this.user,\n        loginStatus: this.state.loginStatus,\n        // exposed methods\n        isLoggedIn: this.isLoggedIn,\n        signin: this.signin,\n        signout: this.signout\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst AuthConsumer = AuthContext.Consumer;\nexport { AuthProvider, AuthConsumer };","map":{"version":3,"sources":["/Users/clarabesset/Documents/front dino/src/auth/Guard.jsx"],"names":["React","axios","apiAuthHandler","create","withCredentials","baseURL","process","env","REACT_APP_BACKEND_URL","AuthContext","createContext","AuthProvider","Component","constructor","isLoggedIn","get","then","serverRes","updateState","data","catch","serverErr","setState","loginStatus","signin","clbk","post","signout","state","user","componentDidMount","render","props","children","AuthConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\n// let's create a api handler for auth purposes\n// notice withCredentials option\n// this will allow axios to send the auth cookie, provided by express, with each request\nconst apiAuthHandler = axios.create({\n  withCredentials: true,\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\n\n/*\nFrom  React doc : https://reactjs.org/docs/context.html#when-to-use-context\n---------------------------------\nIn a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\n---------------------------------\nContext is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:\n*/\n\nconst AuthContext = React.createContext();\n// Basics Context concepts\n// createContext() — return 2 components : Provider and Consumer.\n// Provider — Component exposing data changes to subscribed Consumers\n// Consumer — Component subscribed to a Provider\n\nclass AuthProvider extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loginStatus: {}, // by default, user is not signed-in...\n      // i started with a false value but then ...\n      // i've put an object literal here just to avoid a weird refresh bug ... still investigating\n      user: null\n    };\n  }\n\n  componentDidMount() {\n    this.isLoggedIn(); // check if user is signed-in when AuthConsumer is mounted\n  }\n\n  // check mdn @ : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/get\n  get user() {\n    return this.state.user;\n  }\n\n  updateState(data) {\n    const { loginStatus, user } = data;\n    this.setState({ loginStatus: loginStatus, user: user });\n  }\n\n  isLoggedIn = () => {\n    apiAuthHandler\n      .get(\"/loggedin\", null)\n      .then(serverRes => {\n        // server accepted the request (this user is stored into session)\n        // let's update the state loginStatus + user key/value pairs\n        this.updateState(serverRes.data);\n      })\n      .catch(serverErr => {\n        // console.error(serverErr);\n        this.setState({ loginStatus: false });\n      });\n  };\n\n  signin = (clbk, data) => {\n    apiAuthHandler\n      .post(\"/signin\", data)\n      .then(async serverRes => {\n        // once loggedin, the state is updated =>\n        // this will prevent the ProtectedRoute component redirect to /signin\n        // check src/auth/ProtectedRoute.js\n        await this.updateState(serverRes.data); // wait state update\n        // then ... exec the callback (leading to a redirect)\n        clbk(serverRes.data.loginStatus);\n      })\n      .catch(serverErr => this.setState({ isLoggedIn: false }));\n  };\n\n  signout = clbk => {\n    // send a request to the server : session will be destroyed there\n    apiAuthHandler.post(\"/logout\").then(serverRes => {\n      this.setState({ loginStatus: false }, () => clbk(this.isLoggedIn));\n    });\n  };\n\n  render() {\n    // return a context Provider ...\n    return (\n      <AuthContext.Provider\n        // below, the values exposed by the provider (to be consumed later ;)\n        value={{\n          // exposed properties\n          user: this.user,\n          loginStatus: this.state.loginStatus,\n          // exposed methods\n          isLoggedIn: this.isLoggedIn,\n          signin: this.signin,\n          signout: this.signout\n        }}\n      >\n        {/* here, the provider children tags will be inserted */}\n        {this.props.children}\n      </AuthContext.Provider>\n    );\n  }\n}\n\nconst AuthConsumer = AuthContext.Consumer;\n\nexport { AuthProvider, AuthConsumer };"]},"metadata":{},"sourceType":"module"}