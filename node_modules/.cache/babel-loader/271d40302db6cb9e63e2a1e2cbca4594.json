{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentGrid: [{}]\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  generateMeteor() {\n    var res = 0;\n    let randomCell = this.state.currentGrid[this.getRandomInt(1, 98)];\n    console.log(this.currentGrid.indexOf(randomCell));\n\n    if (randomCell.type !== \"meteor\") {\n      randomCell = {\n        taken: true,\n        type: \"meteor\",\n        color: null\n      };\n      res = 1;\n    }\n\n    return res;\n  }\n\n  generateGrid() {\n    const grid = [];\n    var meteors = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        grid.push({\n          x: i,\n          y: j,\n          taken: false,\n          color: null,\n          cellNumber: [i]\n        });\n      }\n    } //generate meteorites\n\n\n    do {\n      meteors += generateMeteor();\n    } while (meteors !== 2);\n\n    console.log(randomCell);\n    this.setState({\n      currentGrid: grid\n    }, () => {});\n  } // function generateBoard() {\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","Board","state","currentGrid","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","generateMeteor","res","randomCell","console","log","indexOf","type","taken","color","grid","meteors","i","j","push","x","y","cellNumber","setState","render","length","map","cell"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CG,KAD2C,GACnC;AACNC,MAAAA,WAAW,EAAE,CAAC,EAAD;AADP,KADmC;AAAA;;AAK3CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,YAAL;AACD;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAMC,GAAN,EAAW;AACrB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,CAAYJ,GAAZ,IAAmBE,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA9B,CAAP;AACD;;AAEDI,EAAAA,cAAc,GAAG;AACf,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,UAAU,GAAG,KAAKZ,KAAL,CAAWC,WAAX,CAAuB,KAAKG,YAAL,CAAkB,CAAlB,EAAqB,EAArB,CAAvB,CAAjB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAL,CAAiBc,OAAjB,CAAyBH,UAAzB,CAAZ;;AACA,QAAIA,UAAU,CAACI,IAAX,KAAoB,QAAxB,EAAkC;AAChCJ,MAAAA,UAAU,GAAG;AACXK,QAAAA,KAAK,EAAE,IADI;AAEXD,QAAAA,IAAI,EAAE,QAFK;AAGXE,QAAAA,KAAK,EAAE;AAHI,OAAb;AAKAP,MAAAA,GAAG,GAAG,CAAN;AACD;;AACD,WAAOA,GAAP;AACD;;AAEDR,EAAAA,YAAY,GAAG;AACb,UAAMgB,IAAI,GAAG,EAAb;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BH,QAAAA,IAAI,CAACI,IAAL,CAAU;AACRC,UAAAA,CAAC,EAAEH,CADK;AAERI,UAAAA,CAAC,EAAEH,CAFK;AAGRL,UAAAA,KAAK,EAAE,KAHC;AAIRC,UAAAA,KAAK,EAAE,IAJC;AAKRQ,UAAAA,UAAU,EAAE,CAACL,CAAD;AALJ,SAAV;AAOD;AACF,KAbY,CAeb;;;AACA,OAAG;AACDD,MAAAA,OAAO,IAAIV,cAAc,EAAzB;AACD,KAFD,QAESU,OAAO,KAAK,CAFrB;;AAIAP,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEA,SAAKe,QAAL,CAAc;AAAE1B,MAAAA,WAAW,EAAEkB;AAAf,KAAd,EAAqC,MAAM,CAAE,CAA7C;AACD,GAnD0C,CAqD3C;AAEA;;;AAEAS,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK5B,KAAL,CAAWC,WAAX,CAAuB4B,MAAvB,IACC,KAAK7B,KAAL,CAAWC,WAAX,CAAuB6B,GAAvB,CAA2B,CAACC,IAAD,EAAOV,CAAP,KAAa;AACtC,aAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEA,CAAX;AAAc,QAAA,IAAI,EAAEU,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,CAFJ,CADF;AAQD;;AAlE0C","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\n\nexport default class Board extends Component {\n  state = {\n    currentGrid: [{}]\n  };\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  generateMeteor() {\n    var res = 0;\n    let randomCell = this.state.currentGrid[this.getRandomInt(1, 98)];\n    console.log(this.currentGrid.indexOf(randomCell));\n    if (randomCell.type !== \"meteor\") {\n      randomCell = {\n        taken: true,\n        type: \"meteor\",\n        color: null\n      };\n      res = 1;\n    }\n    return res;\n  }\n\n  generateGrid() {\n    const grid = [];\n    var meteors = 0;\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        grid.push({\n          x: i,\n          y: j,\n          taken: false,\n          color: null,\n          cellNumber: [i]\n        });\n      }\n    }\n\n    //generate meteorites\n    do {\n      meteors += generateMeteor();\n    } while (meteors !== 2);\n\n    console.log(randomCell);\n\n    this.setState({ currentGrid: grid }, () => {});\n  }\n\n  // function generateBoard() {\n\n  // }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.state.currentGrid.length &&\n          this.state.currentGrid.map((cell, i) => {\n            return <Cell key={i} cell={cell} />;\n          })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}