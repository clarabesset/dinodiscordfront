{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport DinoPicker from './../components/DinoPicker';\nimport KeyListener from './../components/KeyListener';\nimport Result from '../pages/Result';\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlayer = color => {\n      // console.log('yata ! one player entre dans le game : )', color);\n      const copy = [...this.state.players];\n\n      if (copy.length < 2) {\n        copy.push({\n          color: color,\n          nb: copy.length + 1\n        });\n        this.setState({\n          players: copy\n        }, () => {\n          if (this.state.players.length === 1) {\n            this.setPlayerPositionInGrid(this.state.players[0], 0);\n          }\n\n          if (this.state.players.length === 2) {\n            this.setPlayerPositionInGrid(this.state.players[1], 99);\n            this.setState({\n              step: 2\n            });\n          } // quand deux joueurs sont créés, lancer le jeu\n\n        });\n      }\n    };\n\n    this.movePlayer = (direction, playerNumber) => {\n      // console.log('player ' + playerNumber + ' moved ' + direction);\n      const copiedGrid = [...this.state.currentGrid];\n      const currentCell = copiedGrid.filter(cell => cell.player && cell.player.nb === playerNumber)[0].nb;\n\n      const findNextCell = (currentCellNb, nextDirection) => {\n        const moves = {\n          up: -10,\n          right: 1,\n          down: 10,\n          left: -1\n        };\n\n        if (nextDirection === 'up') {\n          if (currentCellNb - 10 < 0) return false;\n        } else if (nextDirection === 'down') {\n          if (currentCellNb + 10 > 99) return false;\n        } else if (nextDirection === 'left') {\n          const forbiden = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n          if (forbiden.includes(currentCellNb)) return false;\n        } else if (nextDirection === 'right') {\n          const forbiden = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n          if (forbiden.includes(currentCellNb)) return false;\n        }\n\n        const nextIndex = currentCellNb + moves[nextDirection]; // console.log('next index ???', nextIndex);\n        // return this.state.currentGrid[nextIndex];\n\n        return nextIndex;\n      }; // console.log(\"currentCell ?\" , currentCell)\n      // if (!currentCell) return\n\n\n      const nextCell = findNextCell(currentCell, direction); // console.log(\"nextCell ???\", nextCell);\n\n      if (nextCell) {\n        // console.log('copiedGrid', copiedGrid);\n        // console.log(\"playerNumber\", playerNumber);\n        // console.log('current cell nb ?', currentCell, copiedGrid[currentCell]);\n        // console.log('player ?', copiedGrid[currentCell].player);\n        copiedGrid[currentCell].player = null;\n        copiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n        copiedGrid[nextCell].taken = true;\n        copiedGrid[nextCell].color = this.state.players[0].color;\n        /* copiedGrid[nextCell].color = true */\n        // console.log(this.state.players[0].color)\n        // console.log(\"------\");\n        // console.log(this.state.players[playerNumber - 1]);\n        // console.log(\"------\");\n        // console.log(copiedGrid[currentCell]);\n\n        this.setState({\n          currentGrid: copiedGrid\n        }, () => {// console.log(\"yata ?\", this.state.currentGrid);\n        });\n      } // copiedGrid[currentCell.nb].player = null;\n      // copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n      // this.setState({currentGrid: copiedGrid}, () => {\n      // \tconsole.log(this.state.currentGrid)\n      // })\n      // this.setState({})\n\n\n      return; // if (direction === 'down') {\n      // r.player\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t(cell) =>\n      // \t  cell.x === playerPosition.x && cell.y === playerPosition.y+1\n      // )[0];\n      // console.log(nextPosition);\n      // console.log(this.state.currentGrid[nextPosition])\n      // nextPosition.taken = true;\n      // nextPosition.color = playerPosition.player.color;\n      // this.setState({currentGrid[]})\n      // }\n      // if (direction === 'right') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n      // if (direction === 'left') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n      // if (direction === 'up') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x && cell.y === playerPosition.y-1\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n\n      /*         handleChange: function (e) {\n      \titem = this.state.items[1];\n      \titem.name = 'newName';\n      \titems[1] = item;\n       \n      \tthis.setState({items: items});\n       } */\n      // mettre à jour les position de l'objet\n      // l'assigner à la nouvelle cel en func de la dir\n      // supprimer l'ancienne pos\n    };\n\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: true,\n            color: 'red',\n            player: this.state.players[count === 0 ? 0 : 99],\n            meteorite: false\n            /* player: null */\n\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n\n    this.setState({\n      currentGrid: grid\n    });\n  }\n\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n\n  render() {\n    // console.log('youpi');\n    console.log(\"heeeergeyguya\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(KeyListener, {\n      currentGrid: this.state.currentGrid,\n      movePlayer: this.movePlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), this.state.step === 1 && React.createElement(DinoPicker, {\n      setPlayer: this.setPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), this.state.step === 2 && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        player: cell.player,\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      });\n    })), this.state.step === 3 && React.createElement(Result, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })); // );\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","DinoPicker","KeyListener","Result","Board","constructor","props","setPlayer","color","copy","state","players","length","push","nb","setState","setPlayerPositionInGrid","step","movePlayer","direction","playerNumber","copiedGrid","currentGrid","currentCell","filter","cell","player","findNextCell","currentCellNb","nextDirection","moves","up","right","down","left","forbiden","includes","nextIndex","nextCell","taken","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","get2RandCellIndexes","indexes","grid","count","i","j","pos","indexOf","x","y","meteorite","cellNumber","gridCopy","render","console","log","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport DinoPicker from './../components/DinoPicker';\nimport KeyListener from './../components/KeyListener';\nimport Result from '../pages/Result';\n\nexport default class Board extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentGrid: [],\n\t\t\tplayers: [],\n\t\t\tstep: 1 // changer la vue pour les différentes étapes du jeu\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.generateGrid();\n\t}\n\n\tgetRandomInt(min, max) {\n\t\treturn Math.floor(Math.random(min) * Math.floor(max));\n\t}\n\n\tget2RandCellIndexes() {\n\t\tconst indexes = []; // cases choisies au hasard\n\t\tdo {\n\t\t\tconst nb = this.getRandomInt(1, 98);\n\t\t\tif (!indexes.includes(nb)) indexes.push(nb);\n\t\t} while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\t\treturn indexes;\n\t}\n\n\tgenerateGrid() {\n\t\tconst grid = [];\n\t\tconst indexes = this.get2RandCellIndexes();\n\t\tvar count = 0;\n\t\tfor (let i = 0; i <= 9; i++) {\n\t\t\tfor (let j = 0; j <= 9; j++) {\n\t\t\t\tconst pos = indexes.indexOf(count); // if not found => return -1\n\t\t\t\tif (count === 0 || count === 99) {\n\t\t\t\t\t// les cases où les joueurs doivent être placés\n\t\t\t\t\tgrid.push({\n\t\t\t\t\t\tx: i,\n\t\t\t\t\t\ty: j,\n\t\t\t\t\t\tnb: count,\n\t\t\t\t\t\ttaken: true,\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tplayer: this.state.players[count === 0 ? 0 : 99],\n\t\t\t\t\t\tmeteorite: false,\n\t\t\t\t\t\t/* player: null */\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tgrid.push({\n\t\t\t\t\t\tx: i,\n\t\t\t\t\t\ty: j,\n\t\t\t\t\t\tnb: count,\n\t\t\t\t\t\ttaken: pos !== -1 ? true : false,\n\t\t\t\t\t\tcolor: null,\n\t\t\t\t\t\tmeteorite: pos !== -1 ? true : false,\n\t\t\t\t\t\tplayer: null\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcount++; // gui@check ça suis pas sûr\n\t\t\t}\n\t\t}\n\t\tthis.setState({ currentGrid: grid });\n\t}\n\n\tsetPlayerPositionInGrid(player, cellNumber) {\n\t\tconst gridCopy = [ ...this.state.currentGrid ];\n\t\tgridCopy[cellNumber].player = player;\n\t\tthis.setState({\n\t\t\tcurrentGrid: gridCopy\n\t\t});\n\t}\n\n\tsetPlayer = (color) => {\n\t\t// console.log('yata ! one player entre dans le game : )', color);\n\t\tconst copy = [ ...this.state.players ];\n\t\tif (copy.length < 2) {\n\t\t\tcopy.push({\n\t\t\t\tcolor: color,\n\t\t\t\tnb: copy.length + 1\n\t\t\t});\n\t\t\tthis.setState({ players: copy }, () => {\n\t\t\t\tif (this.state.players.length === 1) {\n\t\t\t\t\tthis.setPlayerPositionInGrid(this.state.players[0], 0);\n\t\t\t\t}\n\t\t\t\tif (this.state.players.length === 2) {\n\t\t\t\t\tthis.setPlayerPositionInGrid(this.state.players[1], 99);\n\t\t\t\t\tthis.setState({ step: 2 });\n\t\t\t\t} // quand deux joueurs sont créés, lancer le jeu\n\t\t\t});\n\t\t}\n\t};\n\n\tmovePlayer = (direction, playerNumber) => {\n\t\t// console.log('player ' + playerNumber + ' moved ' + direction);\n\t\tconst copiedGrid = [ ...this.state.currentGrid ];\n\t\tconst currentCell = copiedGrid.filter((cell) => cell.player && cell.player.nb === playerNumber)[0].nb;\n\n\t\tconst findNextCell = (currentCellNb, nextDirection) => {\n\t\t\tconst moves = {\n\t\t\t\tup: -10,\n\t\t\t\tright: 1,\n\t\t\t\tdown: 10,\n\t\t\t\tleft: -1\n\t\t\t};\n\t\t\tif (nextDirection === 'up') {\n\t\t\t\tif (currentCellNb - 10 < 0) return false;\n\t\t\t} else if (nextDirection === 'down') {\n\t\t\t\tif (currentCellNb + 10 > 99) return false;\n\t\t\t} else if (nextDirection === 'left') {\n\t\t\t\tconst forbiden = [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 ];\n\t\t\t\tif (forbiden.includes(currentCellNb)) return false;\n\t\t\t} else if (nextDirection === 'right') {\n\t\t\t\tconst forbiden = [ 9, 19, 29, 39, 49, 59, 69, 79, 89, 99 ];\n\t\t\t\tif (forbiden.includes(currentCellNb)) return false;\n\t\t\t}\n\n\t\t\tconst nextIndex = currentCellNb + moves[nextDirection];\n\t\t\t// console.log('next index ???', nextIndex);\n\t\t\t// return this.state.currentGrid[nextIndex];\n\t\t\treturn nextIndex;\n\t\t};\n\n\t\t// console.log(\"currentCell ?\" , currentCell)\n\t\t// if (!currentCell) return\n\t\tconst nextCell = findNextCell(currentCell, direction);\n\n\t\t// console.log(\"nextCell ???\", nextCell);\n\n\t\tif (nextCell) {\n\t\t\t// console.log('copiedGrid', copiedGrid);\n\t\t\t// console.log(\"playerNumber\", playerNumber);\n\t\t\t\n\t\t\t// console.log('current cell nb ?', currentCell, copiedGrid[currentCell]);\n\t\t\t// console.log('player ?', copiedGrid[currentCell].player);\n\t\t\t\n\t\t\tcopiedGrid[currentCell].player = null;\n\t\t\tcopiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n\t\t\tcopiedGrid[nextCell].taken = true\n\t\t\tcopiedGrid[nextCell].color = this.state.players[0].color\n\t\t\t/* copiedGrid[nextCell].color = true */\n\t\t\t// console.log(this.state.players[0].color)\n\t\t\t// console.log(\"------\");\n\t\t\t// console.log(this.state.players[playerNumber - 1]);\n\t\t\t\n\t\t\t// console.log(\"------\");\n\t\t\t\n\t\t\t// console.log(copiedGrid[currentCell]);\n\t\t\tthis.setState({ currentGrid: copiedGrid }, () => {\n\t\t\t\t// console.log(\"yata ?\", this.state.currentGrid);\n\t\t\t});\n\n\t\t\t\n\t\t}\n\n\t\t// copiedGrid[currentCell.nb].player = null;\n\t\t// copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n\n\t\t// this.setState({currentGrid: copiedGrid}, () => {\n\t\t// \tconsole.log(this.state.currentGrid)\n\t\t// })\n\t\t\n\t\t// this.setState({})\n\t\treturn;\n\t\t// if (direction === 'down') {\n\n\t\t// r.player\n\n\t\t// \tconst nextPosition = copiedGrid.filter(\n\t\t// \t(cell) =>\n\t\t// \t  cell.x === playerPosition.x && cell.y === playerPosition.y+1\n\t\t// )[0];\n\t\t// console.log(nextPosition);\n\t\t// console.log(this.state.currentGrid[nextPosition])\n\t\t// nextPosition.taken = true;\n\t\t// nextPosition.color = playerPosition.player.color;\n\t\t// this.setState({currentGrid[]})\n\n\t\t// }\n\t\t// if (direction === 'right') {\n\t\t// \tconst nextPosition = copiedGrid.filter(\n\t\t// \t\t(cell) =>\n\t\t// \t\t  cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n\t\t// \t)[0];\n\t\t// \tconsole.log(nextPosition);\n\t\t// }\n\t\t// if (direction === 'left') {\n\t\t// \tconst nextPosition = copiedGrid.filter(\n\t\t// \t\t(cell) =>\n\t\t// \t\t  cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n\t\t// \t)[0];\n\t\t// \tconsole.log(nextPosition);\n\t\t// }\n\t\t// if (direction === 'up') {\n\t\t// \tconst nextPosition = copiedGrid.filter(\n\t\t// \t\t(cell) =>\n\t\t// \t\t  cell.x === playerPosition.x && cell.y === playerPosition.y-1\n\t\t// \t)[0];\n\t\t// \tconsole.log(nextPosition);\n\t\t// }\n\t\t/*         handleChange: function (e) {\n\t\t\titem = this.state.items[1];\n\t\t\titem.name = 'newName';\n\t\t\titems[1] = item;\n\t\t \n\t\t\tthis.setState({items: items});\n\t\t } */\n\n\t\t// mettre à jour les position de l'objet\n\t\t// l'assigner à la nouvelle cel en func de la dir\n\t\t// supprimer l'ancienne pos\n\t};\n\n\trender() {\n\t\t// console.log('youpi');\n\t\tconsole.log(\"heeeergeyguya\")\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<KeyListener currentGrid={this.state.currentGrid} movePlayer={this.movePlayer} />\n\t\t\t\t{this.state.step === 1 && <DinoPicker setPlayer={this.setPlayer} />}\n\t\t\t\t{this.state.step === 2 && (\n\t\t\t\t\t<div className=\"board\">\n\t\t\t\t\t\t{this.state.currentGrid.length &&\n\t\t\t\t\t\t\tthis.state.currentGrid.map((cell, i) => {\n\t\t\t\t\t\t\t\treturn <Cell player={cell.player} key={i} cell={cell} />;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{this.state.step === 3 && <Result />}\n\t\t\t</React.Fragment>\n\t\t);\n\n\t\t// );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}