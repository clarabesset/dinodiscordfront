{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport DinoPicker from './../components/DinoPicker';\nimport KeyListener from './../components/KeyListener';\nimport Result from '../pages/Result';\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlayer = color => {\n      console.log('yata ! one player entre dans le game : )', color);\n      const copy = [...this.state.players];\n\n      if (copy.length < 2) {\n        copy.push({\n          color: color,\n          nb: copy.length + 1\n        });\n        this.setState({\n          players: copy\n        }, () => {\n          if (this.state.players.length === 1) {\n            this.setPlayerPositionInGrid(this.state.players[0], 0);\n          }\n\n          if (this.state.players.length === 2) {\n            this.setPlayerPositionInGrid(this.state.players[1], 99);\n            this.setState({\n              step: 2\n            });\n          } // quand deux joueurs sont créés, lancer le jeu\n\n        });\n      }\n    };\n\n    this.movePlayer = (direction, playerNumber) => {\n      console.log(\"player \" + playerNumber + \" moved \" + direction);\n      const copiedGrid = [this.state.currentGrid];\n      const findPlayerInGrid = copiedGrid.filter(cell => cell.player && cell.player.nb === playerNumber)[0];\n      console.log(findPlayerInGrid); // mettre à jour les position de l'objet\n      // l'assigner à la nouvelle cel en func de la dir\n      // supprimer l'ancienne pos\n    };\n\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            taken: true,\n            color: 'red',\n            player: this.state.players[count === 0 ? 0 : 99],\n            // ???\n            meteorite: false,\n            player: null\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n\n    this.setState({\n      currentGrid: grid\n    });\n  }\n\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n\n  render() {\n    console.log('youpi');\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(KeyListener, {\n      currentGrid: this.state.currentGrid,\n      movePlayer: this.movePlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), this.state.step === 1 && React.createElement(DinoPicker, {\n      setPlayer: this.setPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), this.state.step === 2 && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        player: cell.player,\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    })), this.state.step === 3 && React.createElement(Result, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })); // );\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","DinoPicker","KeyListener","Result","Board","constructor","props","setPlayer","color","console","log","copy","state","players","length","push","nb","setState","setPlayerPositionInGrid","step","movePlayer","direction","playerNumber","copiedGrid","currentGrid","findPlayerInGrid","filter","cell","player","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","get2RandCellIndexes","indexes","includes","grid","count","i","j","pos","indexOf","x","y","taken","meteorite","cellNumber","gridCopy","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport DinoPicker from './../components/DinoPicker';\nimport KeyListener from './../components/KeyListener';\nimport Result from '../pages/Result';\n\nexport default class Board extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentGrid: [],\n\t\t\tplayers: [],\n\t\t\tstep: 1 // changer la vue pour les différentes étapes du jeu\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.generateGrid();\n\t}\n\n\tgetRandomInt(min, max) {\n\t\treturn Math.floor(Math.random(min) * Math.floor(max));\n\t}\n\n\tget2RandCellIndexes() {\n\t\tconst indexes = []; // cases choisies au hasard\n\t\tdo {\n\t\t\tconst nb = this.getRandomInt(1, 98);\n\t\t\tif (!indexes.includes(nb)) indexes.push(nb);\n\t\t} while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\t\treturn indexes;\n\t}\n\n\tgenerateGrid() {\n\t\tconst grid = [];\n\t\tconst indexes = this.get2RandCellIndexes();\n\t\tvar count = 0;\n\t\tfor (let i = 0; i <= 9; i++) {\n\t\t\tfor (let j = 0; j <= 9; j++) {\n\t\t\t\tconst pos = indexes.indexOf(count); // if not found => return -1\n\t\t\t\tif (count === 0 || count === 99) {\n\t\t\t\t\t// les cases où les joueurs doivent être placés\n\t\t\t\t\tgrid.push({\n\t\t\t\t\t\tx: i,\n\t\t\t\t\t\ty: j,\n\t\t\t\t\t\ttaken: true,\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tplayer: this.state.players[count === 0 ? 0 : 99], // ???\n\t\t\t\t\t\tmeteorite: false,\n\t\t\t\t\t\tplayer: null\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tgrid.push({\n\t\t\t\t\t\tx: i,\n\t\t\t\t\t\ty: j,\n\t\t\t\t\t\ttaken: pos !== -1 ? true : false,\n\t\t\t\t\t\tcolor: null,\n\t\t\t\t\t\tmeteorite: pos !== -1 ? true : false,\n\t\t\t\t\t\tplayer: null\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcount++; // gui@check ça suis pas sûr\n\t\t\t}\n\t\t}\n\t\tthis.setState({ currentGrid: grid });\n\t}\n\n\tsetPlayerPositionInGrid(player, cellNumber) {\n\t\tconst gridCopy = [ ...this.state.currentGrid ];\n\t\tgridCopy[cellNumber].player = player;\n\t\tthis.setState({\n\t\t\tcurrentGrid: gridCopy\n\t\t});\n\t}\n\n\tsetPlayer = (color) => {\n\t\tconsole.log('yata ! one player entre dans le game : )', color);\n\t\tconst copy = [ ...this.state.players ];\n\t\tif (copy.length < 2) {\n\t\t\tcopy.push({\n\t\t\t\tcolor: color,\n\t\t\t\tnb: copy.length + 1\n\t\t\t});\n\t\t\tthis.setState({ players: copy }, () => {\n\t\t\t\tif (this.state.players.length === 1) {\n\t\t\t\t\tthis.setPlayerPositionInGrid(this.state.players[0], 0);\n\t\t\t\t}\n\t\t\t\tif (this.state.players.length === 2) {\n\t\t\t\t\tthis.setPlayerPositionInGrid(this.state.players[1], 99);\n\t\t\t\t\tthis.setState({ step: 2 });\n\t\t\t\t} // quand deux joueurs sont créés, lancer le jeu\n\t\t\t});\n\t\t}\n\t};\n\n\tmovePlayer = (direction, playerNumber) => {\n\t\tconsole.log(\"player \" + playerNumber + \" moved \" + direction);\n\t\tconst copiedGrid = [this.state.currentGrid];\n\t\tconst findPlayerInGrid = copiedGrid.filter(cell => cell.player && cell.player.nb === playerNumber)[0]\n\t\tconsole.log(findPlayerInGrid);\n\t\t// mettre à jour les position de l'objet\n\t\t// l'assigner à la nouvelle cel en func de la dir\n\t\t// supprimer l'ancienne pos\n\t}\n\n\trender() {\n\t\tconsole.log('youpi');\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<KeyListener currentGrid={this.state.currentGrid} movePlayer={this.movePlayer} />\n\t\t\t\t{this.state.step === 1 && <DinoPicker setPlayer={this.setPlayer} />}\n\t\t\t\t{this.state.step === 2 && (\n\t\t\t\t\t<div className=\"board\">\n\t\t\t\t\t\t{this.state.currentGrid.length &&\n\t\t\t\t\t\t\tthis.state.currentGrid.map((cell, i) => {\n\t\t\t\t\t\t\t\treturn <Cell player={cell.player} key={i} cell={cell} />;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{this.state.step === 3 && <Result />}\n\t\t\t</React.Fragment>\n\t\t);\n\n\t\t// );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}