{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport DinoPicker from \"./../components/DinoPicker\";\nimport KeyListener from \"./../components/KeyListener\";\nimport PlayerInfos from \"./../components/PlayerInfos\";\nimport Result from \"../pages/Result\";\nimport socketIO from \"socket.io-client\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlayer = color => {\n      // console.log('yata ! one player entre dans le game : )', color);\n      const copy = [...this.state.players];\n\n      if (copy.length < 2) {\n        copy.push({\n          color: color,\n          nb: copy.length + 1\n        });\n        this.setState({\n          players: copy\n        }, () => {\n          if (this.state.players.length === 1) {\n            this.setPlayerPositionInGrid(this.state.players[0], 0);\n          }\n\n          if (this.state.players.length === 2) {\n            this.setPlayerPositionInGrid(this.state.players[1], 99);\n            this.setState({\n              step: 2\n            });\n          } // quand deux joueurs sont créés, lancer le jeu\n\n        });\n      }\n    };\n\n    this.movePlayer = (direction, playerNumber) => {\n      console.log(\"player \" + playerNumber + \" moved \" + direction);\n      const copiedGrid = [...this.state.currentGrid];\n      const currentCell = copiedGrid.filter(cell => cell.player && cell.player.nb === playerNumber)[0].nb;\n      const takenCell = copiedGrid.filter(cell => cell.taken === true);\n\n      const findNextCell = (currentCellNb, nextDirection) => {\n        const moves = {\n          up: -10,\n          right: 1,\n          down: 10,\n          left: -1\n        };\n\n        if (true) {\n          for (let i = 0; i < takenCell.length; i++) {\n            if (nextDirection === \"up\") {\n              if (currentCellNb - 10 < 0 || currentCellNb - 10 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"down\") {\n              if (currentCellNb + 10 > 99 || currentCellNb + 10 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"left\") {\n              const forbiden = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n              if (forbiden.includes(currentCellNb) || currentCellNb - 1 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"right\") {\n              const forbiden = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n              if (forbiden.includes(currentCellNb) || currentCellNb + 1 === takenCell[i].nb) return false;\n            }\n          }\n        }\n\n        const nextIndex = currentCellNb + moves[nextDirection];\n        console.log(\"CURRENT CELL\", currentCellNb); // return this.state.currentGrid[nextIndex];\n\n        return nextIndex;\n      };\n\n      const findPreviousCell = (currentCellNb, nextDirection) => {\n        if (nextDirection === \"up\") {\n          let previousCell = currentCellNb + 10;\n          console.log(\"previous cell ???\", previousCell);\n          console.log(\" currentCell ???\", currentCell);\n          return previousCell;\n        } else if (nextDirection === \"down\") {\n          let previousCell = currentCellNb - 10;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        } else if (nextDirection === \"left\") {\n          let previousCell = currentCellNb + 1;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        } else if (nextDirection === \"right\") {\n          let previousCell = currentCellNb - 1;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        }\n\n        console.log(\"currentCellNb ???\", currentCellNb); // return this.state.currentGrid[nextIndex];\n      };\n\n      const nextCell = findNextCell(currentCell, direction);\n      const previousCell = findPreviousCell(currentCell, direction);\n      console.log(\"previous cell\", previousCell); // console.log(\"currentCell ?\" , currentCell)\n      // if (!currentCell) return\n      // console.log(\"nextCell ???\", nextCell);\n\n      if (nextCell) {\n        // console.log('current cell nb ?', currentCell, copiedGrid[currentCell]);\n        // console.log('player ?', copiedGrid[currentCell].player);\n        copiedGrid[currentCell].player = null;\n        copiedGrid[currentCell].taken = false;\n        copiedGrid[currentCell].color = this.state.players[0].color;\n        copiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n        copiedGrid[nextCell].taken = true;\n        copiedGrid[nextCell].color = this.state.players[0].color;\n        /* copiedGrid[nextCell].color = true */\n        // console.log(this.state.players[0].color)\n        // console.log(\"------\");\n        // console.log(this.state.players[playerNumber - 1]);\n        // console.log(\"------\");\n        // console.log(copiedGrid[currentCell]);\n\n        this.setState({\n          currentGrid: copiedGrid\n        }, () => {// console.log(\"yata ?\", this.state.currentGrid);\n        });\n      } // copiedGrid[currentCell.nb].player = null;\n      // copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n      // this.setState({currentGrid: copiedGrid}, () => {\n      // \tconsole.log(this.state.currentGrid)\n      // })\n      // this.setState({})\n\n\n      return; // if (direction === 'down') {\n      // r.player\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t(cell) =>\n      // \t  cell.x === playerPosition.x && cell.y === playerPosition.y+1\n      // )[0];\n      // console.log(nextPosition);\n      // console.log(this.state.currentGrid[nextPosition])\n      // nextPosition.taken = true;\n      // nextPosition.color = playerPosition.player.color;\n      // this.setState({currentGrid[]})\n      // }\n      // if (direction === 'right') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n      // if (direction === 'left') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n      // if (direction === 'up') {\n      // \tconst nextPosition = copiedGrid.filter(\n      // \t\t(cell) =>\n      // \t\t  cell.x === playerPosition.x && cell.y === playerPosition.y-1\n      // \t)[0];\n      // \tconsole.log(nextPosition);\n      // }\n\n      /*         handleChange: function (e) {\n      item = this.state.items[1];\n      item.name = 'newName';\n      items[1] = item;\n      \t\t\tthis.setState({items: items});\n      } */\n    };\n\n    this.countPoints = () => {};\n\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: true,\n            color: \"red\",\n            player: this.state.players[count === 0 ? 0 : 99],\n            meteorite: false\n            /* player: null */\n\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n\n    this.setState({\n      currentGrid: grid\n    });\n  }\n\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n\n  render() {\n    console.log(\"heeeergeyguya\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(KeyListener, {\n      currentGrid: this.state.currentGrid,\n      movePlayer: this.movePlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), this.state.step === 1 && React.createElement(DinoPicker, {\n      setPlayer: this.setPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), this.state.step === 2 && React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        player: cell.player,\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      });\n    })), this.state.step === 3 && React.createElement(Result, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","DinoPicker","KeyListener","PlayerInfos","Result","socketIO","Board","constructor","props","setPlayer","color","copy","state","players","length","push","nb","setState","setPlayerPositionInGrid","step","movePlayer","direction","playerNumber","console","log","copiedGrid","currentGrid","currentCell","filter","cell","player","takenCell","taken","findNextCell","currentCellNb","nextDirection","moves","up","right","down","left","i","forbiden","includes","nextIndex","findPreviousCell","previousCell","nextCell","countPoints","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","get2RandCellIndexes","indexes","grid","count","j","pos","indexOf","x","y","meteorite","cellNumber","gridCopy","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport DinoPicker from \"./../components/DinoPicker\";\nimport KeyListener from \"./../components/KeyListener\";\nimport PlayerInfos from \"./../components/PlayerInfos\";\nimport Result from \"../pages/Result\";\nimport socketIO from \"socket.io-client\";\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n    };\n  }\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: true,\n            color: \"red\",\n            player: this.state.players[count === 0 ? 0 : 99],\n            meteorite: false\n            /* player: null */\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n    this.setState({ currentGrid: grid });\n  }\n\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n\n  setPlayer = color => {\n    // console.log('yata ! one player entre dans le game : )', color);\n    const copy = [...this.state.players];\n    if (copy.length < 2) {\n      copy.push({\n        color: color,\n        nb: copy.length + 1\n      });\n      this.setState({ players: copy }, () => {\n        if (this.state.players.length === 1) {\n          this.setPlayerPositionInGrid(this.state.players[0], 0);\n        }\n        if (this.state.players.length === 2) {\n          this.setPlayerPositionInGrid(this.state.players[1], 99);\n          this.setState({ step: 2 });\n        } // quand deux joueurs sont créés, lancer le jeu\n      });\n    }\n  };\n\n  // if cell.player.playernumber == 1 || 2\n\n  movePlayer = (direction, playerNumber) => {\n    console.log(\"player \" + playerNumber + \" moved \" + direction);\n    const copiedGrid = [...this.state.currentGrid];\n    const currentCell = copiedGrid.filter(\n      cell => cell.player && cell.player.nb === playerNumber\n    )[0].nb;\n    const takenCell = copiedGrid.filter(cell => cell.taken === true);\n\n    const findNextCell = (currentCellNb, nextDirection) => {\n      const moves = {\n        up: -10,\n        right: 1,\n        down: 10,\n        left: -1\n      };\n      if (true) {\n        for (let i = 0; i < takenCell.length; i++) {\n          if (nextDirection === \"up\") {\n            if (\n              currentCellNb - 10 < 0 ||\n              currentCellNb - 10 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"down\") {\n            if (\n              currentCellNb + 10 > 99 ||\n              currentCellNb + 10 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"left\") {\n            const forbiden = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n            if (\n              forbiden.includes(currentCellNb) ||\n              currentCellNb - 1 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"right\") {\n            const forbiden = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n            if (\n              forbiden.includes(currentCellNb) ||\n              currentCellNb + 1 === takenCell[i].nb\n            )\n              return false;\n          }\n        }\n      }\n      const nextIndex = currentCellNb + moves[nextDirection];\n      console.log(\"CURRENT CELL\", currentCellNb);\n      // return this.state.currentGrid[nextIndex];\n      return nextIndex;\n    };\n\n    const findPreviousCell = (currentCellNb, nextDirection) => {\n      if (nextDirection === \"up\") {\n        let previousCell = currentCellNb + 10;\n        console.log(\"previous cell ???\", previousCell);\n        console.log(\" currentCell ???\", currentCell);\n        return previousCell;\n      } else if (nextDirection === \"down\") {\n        let previousCell = currentCellNb - 10;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      } else if (nextDirection === \"left\") {\n        let previousCell = currentCellNb + 1;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      } else if (nextDirection === \"right\") {\n        let previousCell = currentCellNb - 1;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      }\n      console.log(\"currentCellNb ???\", currentCellNb);\n\n      // return this.state.currentGrid[nextIndex];\n    };\n\n    const nextCell = findNextCell(currentCell, direction);\n    const previousCell = findPreviousCell(currentCell, direction);\n    console.log(\"previous cell\", previousCell);\n    // console.log(\"currentCell ?\" , currentCell)\n    // if (!currentCell) return\n\n    // console.log(\"nextCell ???\", nextCell);\n\n    if (nextCell) {\n      // console.log('current cell nb ?', currentCell, copiedGrid[currentCell]);\n      // console.log('player ?', copiedGrid[currentCell].player);\n\n      copiedGrid[currentCell].player = null;\n      copiedGrid[currentCell].taken = false;\n      copiedGrid[currentCell].color = this.state.players[0].color;\n      copiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n      copiedGrid[nextCell].taken = true;\n      copiedGrid[nextCell].color = this.state.players[0].color;\n      /* copiedGrid[nextCell].color = true */\n      // console.log(this.state.players[0].color)\n      // console.log(\"------\");\n      // console.log(this.state.players[playerNumber - 1]);\n\n      // console.log(\"------\");\n\n      // console.log(copiedGrid[currentCell]);\n      this.setState({ currentGrid: copiedGrid }, () => {\n        // console.log(\"yata ?\", this.state.currentGrid);\n      });\n    }\n\n    // copiedGrid[currentCell.nb].player = null;\n    // copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n\n    // this.setState({currentGrid: copiedGrid}, () => {\n    // \tconsole.log(this.state.currentGrid)\n    // })\n\n    // this.setState({})\n    return;\n    // if (direction === 'down') {\n\n    // r.player\n\n    // \tconst nextPosition = copiedGrid.filter(\n    // \t(cell) =>\n    // \t  cell.x === playerPosition.x && cell.y === playerPosition.y+1\n    // )[0];\n    // console.log(nextPosition);\n    // console.log(this.state.currentGrid[nextPosition])\n    // nextPosition.taken = true;\n    // nextPosition.color = playerPosition.player.color;\n    // this.setState({currentGrid[]})\n\n    // }\n    // if (direction === 'right') {\n    // \tconst nextPosition = copiedGrid.filter(\n    // \t\t(cell) =>\n    // \t\t  cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n    // \t)[0];\n    // \tconsole.log(nextPosition);\n    // }\n    // if (direction === 'left') {\n    // \tconst nextPosition = copiedGrid.filter(\n    // \t\t(cell) =>\n    // \t\t  cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n    // \t)[0];\n    // \tconsole.log(nextPosition);\n    // }\n    // if (direction === 'up') {\n    // \tconst nextPosition = copiedGrid.filter(\n    // \t\t(cell) =>\n    // \t\t  cell.x === playerPosition.x && cell.y === playerPosition.y-1\n    // \t)[0];\n    // \tconsole.log(nextPosition);\n    // }\n    /*         handleChange: function (e) {\n\t\t\titem = this.state.items[1];\n\t\t\titem.name = 'newName';\n\t\t\titems[1] = item;\n\t\t \n\t\t\tthis.setState({items: items});\n\t\t } */\n  };\n\n  countPoints = () => {};\n\n  render() {\n    console.log(\"heeeergeyguya\");\n    return (\n      <React.Fragment>\n        {/* <PlayerInfos/> */}\n        <KeyListener\n          currentGrid={this.state.currentGrid}\n          movePlayer={this.movePlayer}\n        />\n        {this.state.step === 1 && <DinoPicker setPlayer={this.setPlayer} />}\n        {this.state.step === 2 && (\n          <div className=\"board\">\n            {this.state.currentGrid.length &&\n              this.state.currentGrid.map((cell, i) => {\n                return <Cell player={cell.player} key={i} cell={cell} />;\n              })}\n          </div>\n        )}\n        {this.state.step === 3 && <Result />}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}