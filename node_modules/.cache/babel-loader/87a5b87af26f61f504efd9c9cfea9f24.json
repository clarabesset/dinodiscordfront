{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentGrid: [{}]\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = [];\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2);\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        count++; // gui@check ça suis pas sûr\n\n        const pos = indexes.indexOf(count); // if not found => return -1\n\n        grid.push({\n          x: i,\n          y: j,\n          taken: pos !== -1 ? true : false,\n          color: null,\n          type: pos !== -1 ? \"meteorite\" : \"cell\",\n          cellNumber: [i]\n        });\n      }\n    } //generate meteorites\n\n\n    this.setState({\n      currentGrid: grid\n    });\n  }\n\n  generateDinos() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","Board","state","currentGrid","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","get2RandCellIndexes","indexes","nb","includes","push","length","grid","count","i","j","pos","indexOf","x","y","taken","color","type","cellNumber","setState","generateDinos","render","map","cell"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CG,KAD2C,GACnC;AACNC,MAAAA,WAAW,EAAE,CAAC,EAAD;AADP,KADmC;AAAA;;AAK3CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,YAAL;AACD;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAMC,GAAN,EAAW;AACrB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,CAAYJ,GAAZ,IAAmBE,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA9B,CAAP;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,OAAO,GAAG,EAAhB;;AACA,OAAG;AACD,YAAMC,EAAE,GAAG,KAAKR,YAAL,CAAkB,CAAlB,EAAqB,EAArB,CAAX;AACA,UAAI,CAACO,OAAO,CAACE,QAAR,CAAiBD,EAAjB,CAAL,EAA2BD,OAAO,CAACG,IAAR,CAAaF,EAAb;AAC5B,KAHD,QAGSD,OAAO,CAACI,MAAR,KAAmB,CAH5B;;AAIA,WAAOJ,OAAP;AACD;;AAEDR,EAAAA,YAAY,GAAG;AACb,UAAMa,IAAI,GAAG,EAAb;AACA,UAAML,OAAO,GAAG,KAAKD,mBAAL,EAAhB;AACA,QAAIO,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,QAAAA,KAAK,GADsB,CAClB;;AACT,cAAMG,GAAG,GAAGT,OAAO,CAACU,OAAR,CAAgBJ,KAAhB,CAAZ,CAF2B,CAES;;AACpCD,QAAAA,IAAI,CAACF,IAAL,CAAU;AACRQ,UAAAA,CAAC,EAAEJ,CADK;AAERK,UAAAA,CAAC,EAAEJ,CAFK;AAGRK,UAAAA,KAAK,EAAEJ,GAAG,KAAK,CAAC,CAAT,GAAa,IAAb,GAAoB,KAHnB;AAIRK,UAAAA,KAAK,EAAE,IAJC;AAKRC,UAAAA,IAAI,EAAEN,GAAG,KAAK,CAAC,CAAT,GAAa,WAAb,GAA2B,MALzB;AAMRO,UAAAA,UAAU,EAAE,CAACT,CAAD;AANJ,SAAV;AAQD;AACF,KAjBY,CAmBb;;;AACA,SAAKU,QAAL,CAAc;AAAE3B,MAAAA,WAAW,EAAEe;AAAf,KAAd;AACD;;AAEDa,EAAAA,aAAa,GAAG,CAAE;;AAElBC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9B,KAAL,CAAWC,WAAX,CAAuBc,MAAvB,IACC,KAAKf,KAAL,CAAWC,WAAX,CAAuB8B,GAAvB,CAA2B,CAACC,IAAD,EAAOd,CAAP,KAAa;AACtC,aAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEA,CAAX;AAAc,QAAA,IAAI,EAAEc,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,CAFJ,CADF;AAQD;;AAxD0C","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\n\nexport default class Board extends Component {\n  state = {\n    currentGrid: [{}]\n  };\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  get2RandCellIndexes() {\n    const indexes = [];\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2);\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        count++; // gui@check ça suis pas sûr\n        const pos = indexes.indexOf(count); // if not found => return -1\n        grid.push({\n          x: i,\n          y: j,\n          taken: pos !== -1 ? true : false,\n          color: null,\n          type: pos !== -1 ? \"meteorite\" : \"cell\",\n          cellNumber: [i]\n        });\n      }\n    }\n\n    //generate meteorites\n    this.setState({ currentGrid: grid });\n  }\n\n  generateDinos() {}\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.state.currentGrid.length &&\n          this.state.currentGrid.map((cell, i) => {\n            return <Cell key={i} cell={cell} />;\n          })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}