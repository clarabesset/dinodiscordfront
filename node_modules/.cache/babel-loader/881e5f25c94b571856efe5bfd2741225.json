{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentGrid: [{}]\n    };\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  generateMeteor() {\n    var res = 0;\n    let randomCell = this.state.currentGrid[this.getRandomInt(1, 98)];\n    let index = this.state.currentGrid.indexOf(randomCell);\n    console.log(\"index ?\", index);\n\n    if (randomCell && randomCell.type !== \"meteorite\") {\n      const copy = [...this.state.currentGrid];\n      copy[index] = {\n        taken: true,\n        type: \"meteorite\",\n        color: null\n      };\n      res = 1;\n      this.setState({\n        currentGrid: copy\n      }, () => {\n        console.log(\"yata\");\n        const meteor = this.state.currentGrid.filter(el => el.type === \"meteorite\");\n        console.log(meteor.length);\n      });\n    }\n\n    return res;\n  }\n\n  get2RandCellIndexes() {\n    const indexes = [];\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2);\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    console.log(indexes);\n    var count = 0;\n    var meteors = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        count++;\n        console.log(indexes[0] === count || indexes[1] === count);\n        const pos = indexes.indexOf(count);\n        grid.push({\n          x: i,\n          y: j,\n          taken: pos !== -1 ? true : false,\n          color: null,\n          type: pos !== -1 ? \"meteorite\" : \"cell\",\n          cellNumber: [i]\n        });\n      }\n    } //generate meteorites\n    // console.log(randomCell);\n\n\n    this.setState({\n      currentGrid: grid\n    }, () => {});\n  } // function generateBoard() {\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Ironhack Paris/dino-discord/DinoDiscoord v2/dinodiscord/dinodiscordyes/frontend/src/components/Board.jsx"],"names":["React","Component","Cell","Board","state","currentGrid","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","generateMeteor","res","randomCell","index","indexOf","console","log","type","copy","taken","color","setState","meteor","filter","el","length","get2RandCellIndexes","indexes","nb","includes","push","grid","count","meteors","i","j","pos","x","y","cellNumber","render","map","cell"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\n\nexport default class Board extends Component {\n  state = {\n    currentGrid: [{}]\n  };\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  generateMeteor() {\n    var res = 0;\n    let randomCell = this.state.currentGrid[this.getRandomInt(1, 98)];\n    let index = this.state.currentGrid.indexOf(randomCell);\n    console.log(\"index ?\", index);\n    if (randomCell && randomCell.type !== \"meteorite\") {\n      const copy = [...this.state.currentGrid];\n      copy[index] = {\n        taken: true,\n        type: \"meteorite\",\n        color: null\n      };\n      res = 1;\n\n      this.setState({ currentGrid: copy }, () => {\n        console.log(\"yata\");\n        const meteor = this.state.currentGrid.filter(\n          el => el.type === \"meteorite\"\n        );\n        console.log(meteor.length);\n      });\n    }\n    return res;\n  }\n\n  get2RandCellIndexes() {\n    const indexes = [];\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2);\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    console.log(indexes);\n    var count = 0;\n    var meteors = 0;\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        count++;\n        console.log(indexes[0] === count || indexes[1] === count);\n        const pos = indexes.indexOf(count);\n        grid.push({\n          x: i,\n          y: j,\n          taken: pos !== -1 ? true : false,\n          color: null,\n          type: pos !== -1 ? \"meteorite\" : \"cell\",\n          cellNumber: [i]\n        });\n      }\n    }\n\n    //generate meteorites\n\n    // console.log(randomCell);\n\n    this.setState({ currentGrid: grid }, () => {});\n  }\n\n  // function generateBoard() {\n\n  // }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.state.currentGrid.length &&\n          this.state.currentGrid.map((cell, i) => {\n            return <Cell key={i} cell={cell} />;\n          })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}