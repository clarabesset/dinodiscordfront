{"ast":null,"code":"var _jsxFileName = \"/Users/clarabesset/Documents/front dino/src/components/Board.jsx\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport DinoPicker from \"./../components/DinoPicker\";\nimport KeyListener from \"./../components/KeyListener\";\nimport Result from \"../pages/Result\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlayer = color => {\n      // console.log('yata ! one player entre dans le game : )', color);\n      this.props.socket.emit(\"player-join\", color); // const copy = [...this.state.players];\n      // if (copy.length < 2) {\n      //   copy.push({\n      //     color: color,\n      //     nb: copy.length + 1\n      //   });\n      // this.setState({ players: copy }, () => {\n      //   if (this.state.players.length === 1) {\n      //     console.log(this.props.socket);\n      // this.setPlayerPositionInGrid(this.state.players[0], 0);\n      // }\n      // if (this.state.players.length === 2) {\n      // this.setPlayerPositionInGrid(this.state.players[1], 99);\n      // this.setState({ step: 2 });\n      // } // quand deux joueurs sont créés, lancer le jeu\n      // });\n      // }\n    };\n\n    this.movePlayer = (direction, playerNumber) => {\n      console.log(\"player \" + playerNumber + \" moved \" + direction);\n      const copiedGrid = [...this.state.currentGrid];\n      const currentCell = copiedGrid.filter(cell => cell.player && cell.player.nb === playerNumber)[0].nb;\n      const takenCell = copiedGrid.filter(cell => cell.taken === true);\n\n      const findNextCell = (currentCellNb, nextDirection) => {\n        const moves = {\n          up: -10,\n          right: 1,\n          down: 10,\n          left: -1\n        };\n\n        if (true) {\n          for (let i = 0; i < takenCell.length; i++) {\n            if (nextDirection === \"up\") {\n              if (currentCellNb - 10 < 0 || currentCellNb - 10 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"down\") {\n              if (currentCellNb + 10 > 99 || currentCellNb + 10 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"left\") {\n              const forbiden = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n              if (forbiden.includes(currentCellNb) || currentCellNb - 1 === takenCell[i].nb) return false;\n            } else if (nextDirection === \"right\") {\n              const forbiden = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n              if (forbiden.includes(currentCellNb) || currentCellNb + 1 === takenCell[i].nb) return false;\n            }\n          }\n        }\n\n        const nextIndex = currentCellNb + moves[nextDirection];\n        console.log(\"CURRENT CELL\", currentCellNb); // return this.state.currentGrid[nextIndex];\n\n        return nextIndex;\n      };\n\n      const findPreviousCell = (currentCellNb, nextDirection) => {\n        if (nextDirection === \"up\") {\n          let previousCell = currentCellNb + 10;\n          console.log(\"previous cell ???\", previousCell);\n          console.log(\" currentCell ???\", currentCell);\n          return previousCell;\n        } else if (nextDirection === \"down\") {\n          let previousCell = currentCellNb - 10;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        } else if (nextDirection === \"left\") {\n          let previousCell = currentCellNb + 1;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        } else if (nextDirection === \"right\") {\n          let previousCell = currentCellNb - 1;\n          console.log(\"previous cell ???\", previousCell);\n          return previousCell;\n        }\n\n        console.log(\"currentCellNb ???\", currentCellNb); // return this.state.currentGrid[nextIndex];\n      };\n\n      const nextCell = findNextCell(currentCell, direction);\n      const previousCell = findPreviousCell(currentCell, direction);\n      console.log(\"previous cell\", previousCell); // console.log(\"currentCell ?\" , currentCell)\n      // if (!currentCell) return\n\n      if (nextCell) {\n        copiedGrid[currentCell].player = null;\n        copiedGrid[currentCell].taken = false;\n        copiedGrid[currentCell].color = this.state.players[0].color;\n        copiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n        copiedGrid[nextCell].taken = true;\n        copiedGrid[nextCell].color = this.state.players[0].color;\n        this.setState({\n          currentGrid: copiedGrid\n        }, () => {\n          console.log(this.props.socket); // use socket to broadcast player's move\n          // this.props.socket.emit(\"player-move\", {})\n          // socket.emit('news', { hello: 'world' });\n        });\n      } // copiedGrid[currentCell.nb].player = null;\n      // copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n      // this.setState({currentGrid: copiedGrid}, () => {\n      //  console.log(this.state.currentGrid)\n      // })\n      // this.setState({})\n\n\n      return; // if (direction === 'down') {\n      // r.player\n      //  const nextPosition = copiedGrid.filter(\n      //  (cell) =>\n      //    cell.x === playerPosition.x && cell.y === playerPosition.y+1\n      // )[0];\n      // console.log(nextPosition);\n      // console.log(this.state.currentGrid[nextPosition])\n      // nextPosition.taken = true;\n      // nextPosition.color = playerPosition.player.color;\n      // this.setState({currentGrid[]})\n      // }\n      // if (direction === 'right') {\n      //  const nextPosition = copiedGrid.filter(\n      //      (cell) =>\n      //        cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n      //  )[0];\n      //  console.log(nextPosition);\n      // }\n      // if (direction === 'left') {\n      //  const nextPosition = copiedGrid.filter(\n      //      (cell) =>\n      //        cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n      //  )[0];\n      //  console.log(nextPosition);\n      // }\n      // if (direction === 'up') {\n      //  const nextPosition = copiedGrid.filter(\n      //      (cell) =>\n      //        cell.x === playerPosition.x && cell.y === playerPosition.y-1\n      //  )[0];\n      //  console.log(nextPosition);\n      // }\n\n      /*         handleChange: function (e) {\n              item = this.state.items[1];\n              item.name = 'newName';\n              items[1] = item;\n           \n              this.setState({items: items});\n           } */\n    };\n\n    this.countPoints = () => {};\n\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n\n    };\n  }\n\n  componentDidUpdate() {\n    console.log(\"updated !!!\", this.state.players);\n\n    if (this.state.players.length === 2 && this.state.step !== 2) {\n      return this.launchGame();\n    }\n  }\n\n  static getDerivedStateFromProps(newProps, state) {\n    console.log(\"@getdirevedstatefrompropsnewProps => \", newProps, state);\n\n    if (newProps.playersFromServer.length !== state.players) {\n      return {\n        players: newProps.playersFromServer\n      };\n    } else return null;\n  }\n\n  componentDidMount() {\n    this.generateGrid();\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n\n  launchGame() {\n    console.log(\"to the next step\", this.state.players);\n    this.setPlayerPositionInGrid(this.state.players[0], 0);\n    this.setPlayerPositionInGrid(this.state.players[1], 99);\n    this.setState({\n      step: 2\n    });\n  }\n\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n\n\n    return indexes;\n  }\n\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: true,\n            color: \"red\",\n            player: this.state.players[count === 0 ? 0 : 99],\n            meteorite: false\n            /* player: null */\n\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n\n    this.setState({\n      currentGrid: grid\n    });\n  }\n\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n\n  render() {\n    console.log(\"heeeergeyguya\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(KeyListener, {\n      currentGrid: this.state.currentGrid,\n      movePlayer: this.movePlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), this.state.step === 1 && React.createElement(DinoPicker, {\n      setPlayer: this.setPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), this.state.step === 2 && React.createElement(\"div\", {\n      className: \"smallGameContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playerInfoContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"*here user info*\"), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, this.state.currentGrid.length && this.state.currentGrid.map((cell, i) => {\n      return React.createElement(Cell, {\n        player: cell.player,\n        key: i,\n        cell: cell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"scoreContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"*here your score*\")), this.state.step === 3 && React.createElement(Result, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/clarabesset/Documents/front dino/src/components/Board.jsx"],"names":["React","Component","Cell","DinoPicker","KeyListener","Result","Board","constructor","props","setPlayer","color","socket","emit","movePlayer","direction","playerNumber","console","log","copiedGrid","state","currentGrid","currentCell","filter","cell","player","nb","takenCell","taken","findNextCell","currentCellNb","nextDirection","moves","up","right","down","left","i","length","forbiden","includes","nextIndex","findPreviousCell","previousCell","nextCell","players","setState","countPoints","step","componentDidUpdate","launchGame","getDerivedStateFromProps","newProps","playersFromServer","componentDidMount","generateGrid","getRandomInt","min","max","Math","floor","random","setPlayerPositionInGrid","get2RandCellIndexes","indexes","push","grid","count","j","pos","indexOf","x","y","meteorite","cellNumber","gridCopy","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport DinoPicker from \"./../components/DinoPicker\";\nimport KeyListener from \"./../components/KeyListener\";\nimport Result from \"../pages/Result\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentGrid: [],\n      players: [],\n      step: 1 // changer la vue pour les différentes étapes du jeu\n    };\n  }\n  componentDidUpdate() {\n    console.log(\"updated !!!\", this.state.players);\n    if (this.state.players.length === 2 && this.state.step !== 2) {\n      return this.launchGame();\n    }\n  }\n\n  static getDerivedStateFromProps(newProps, state) {\n    console.log(\"@getdirevedstatefrompropsnewProps => \", newProps, state);\n    if (newProps.playersFromServer.length !== state.players) {\n      return {\n        players: newProps.playersFromServer\n      };\n    } else return null;\n  }\n  componentDidMount() {\n    this.generateGrid();\n  }\n  getRandomInt(min, max) {\n    return Math.floor(Math.random(min) * Math.floor(max));\n  }\n  launchGame() {\n    console.log(\"to the next step\", this.state.players);\n    this.setPlayerPositionInGrid(this.state.players[0], 0);\n    this.setPlayerPositionInGrid(this.state.players[1], 99);\n    this.setState({ step: 2 });\n  }\n  get2RandCellIndexes() {\n    const indexes = []; // cases choisies au hasard\n    do {\n      const nb = this.getRandomInt(1, 98);\n      if (!indexes.includes(nb)) indexes.push(nb);\n    } while (indexes.length !== 2); // 2 : nombres de météorites que l'on veut dès le départ\n    return indexes;\n  }\n  generateGrid() {\n    const grid = [];\n    const indexes = this.get2RandCellIndexes();\n    var count = 0;\n    for (let i = 0; i <= 9; i++) {\n      for (let j = 0; j <= 9; j++) {\n        const pos = indexes.indexOf(count); // if not found => return -1\n        if (count === 0 || count === 99) {\n          // les cases où les joueurs doivent être placés\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: true,\n            color: \"red\",\n            player: this.state.players[count === 0 ? 0 : 99],\n            meteorite: false\n            /* player: null */\n          });\n        } else {\n          grid.push({\n            x: i,\n            y: j,\n            nb: count,\n            taken: pos !== -1 ? true : false,\n            color: null,\n            meteorite: pos !== -1 ? true : false,\n            player: null\n          });\n        }\n        count++; // gui@check ça suis pas sûr\n      }\n    }\n    this.setState({ currentGrid: grid });\n  }\n  setPlayerPositionInGrid(player, cellNumber) {\n    const gridCopy = [...this.state.currentGrid];\n    gridCopy[cellNumber].player = player;\n    this.setState({\n      currentGrid: gridCopy\n    });\n  }\n  setPlayer = color => {\n    // console.log('yata ! one player entre dans le game : )', color);\n    this.props.socket.emit(\"player-join\", color);\n    // const copy = [...this.state.players];\n    // if (copy.length < 2) {\n    //   copy.push({\n    //     color: color,\n    //     nb: copy.length + 1\n    //   });\n    // this.setState({ players: copy }, () => {\n    //   if (this.state.players.length === 1) {\n\n    //     console.log(this.props.socket);\n    // this.setPlayerPositionInGrid(this.state.players[0], 0);\n    // }\n    // if (this.state.players.length === 2) {\n    // this.setPlayerPositionInGrid(this.state.players[1], 99);\n    // this.setState({ step: 2 });\n    // } // quand deux joueurs sont créés, lancer le jeu\n    // });\n    // }\n  };\n  // if cell.player.playernumber == 1 || 2\n  movePlayer = (direction, playerNumber) => {\n    console.log(\"player \" + playerNumber + \" moved \" + direction);\n    const copiedGrid = [...this.state.currentGrid];\n    const currentCell = copiedGrid.filter(\n      cell => cell.player && cell.player.nb === playerNumber\n    )[0].nb;\n    const takenCell = copiedGrid.filter(cell => cell.taken === true);\n    const findNextCell = (currentCellNb, nextDirection) => {\n      const moves = {\n        up: -10,\n        right: 1,\n        down: 10,\n        left: -1\n      };\n      if (true) {\n        for (let i = 0; i < takenCell.length; i++) {\n          if (nextDirection === \"up\") {\n            if (\n              currentCellNb - 10 < 0 ||\n              currentCellNb - 10 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"down\") {\n            if (\n              currentCellNb + 10 > 99 ||\n              currentCellNb + 10 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"left\") {\n            const forbiden = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n            if (\n              forbiden.includes(currentCellNb) ||\n              currentCellNb - 1 === takenCell[i].nb\n            )\n              return false;\n          } else if (nextDirection === \"right\") {\n            const forbiden = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99];\n            if (\n              forbiden.includes(currentCellNb) ||\n              currentCellNb + 1 === takenCell[i].nb\n            )\n              return false;\n          }\n        }\n      }\n      const nextIndex = currentCellNb + moves[nextDirection];\n      console.log(\"CURRENT CELL\", currentCellNb);\n      // return this.state.currentGrid[nextIndex];\n      return nextIndex;\n    };\n    const findPreviousCell = (currentCellNb, nextDirection) => {\n      if (nextDirection === \"up\") {\n        let previousCell = currentCellNb + 10;\n        console.log(\"previous cell ???\", previousCell);\n        console.log(\" currentCell ???\", currentCell);\n        return previousCell;\n      } else if (nextDirection === \"down\") {\n        let previousCell = currentCellNb - 10;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      } else if (nextDirection === \"left\") {\n        let previousCell = currentCellNb + 1;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      } else if (nextDirection === \"right\") {\n        let previousCell = currentCellNb - 1;\n        console.log(\"previous cell ???\", previousCell);\n        return previousCell;\n      }\n      console.log(\"currentCellNb ???\", currentCellNb);\n      // return this.state.currentGrid[nextIndex];\n    };\n    const nextCell = findNextCell(currentCell, direction);\n    const previousCell = findPreviousCell(currentCell, direction);\n    console.log(\"previous cell\", previousCell);\n    // console.log(\"currentCell ?\" , currentCell)\n    // if (!currentCell) return\n    if (nextCell) {\n      copiedGrid[currentCell].player = null;\n      copiedGrid[currentCell].taken = false;\n      copiedGrid[currentCell].color = this.state.players[0].color;\n      copiedGrid[nextCell].player = this.state.players[playerNumber - 1];\n      copiedGrid[nextCell].taken = true;\n      copiedGrid[nextCell].color = this.state.players[0].color;\n      this.setState({ currentGrid: copiedGrid }, () => {\n        console.log(this.props.socket); // use socket to broadcast player's move\n        // this.props.socket.emit(\"player-move\", {})\n        // socket.emit('news', { hello: 'world' });\n      });\n    }\n    // copiedGrid[currentCell.nb].player = null;\n    // copiedGrid[nextCell.nb].player = this.state.players[playerNumber] ;\n    // this.setState({currentGrid: copiedGrid}, () => {\n    //  console.log(this.state.currentGrid)\n    // })\n    // this.setState({})\n    return;\n    // if (direction === 'down') {\n    // r.player\n    //  const nextPosition = copiedGrid.filter(\n    //  (cell) =>\n    //    cell.x === playerPosition.x && cell.y === playerPosition.y+1\n    // )[0];\n    // console.log(nextPosition);\n    // console.log(this.state.currentGrid[nextPosition])\n    // nextPosition.taken = true;\n    // nextPosition.color = playerPosition.player.color;\n    // this.setState({currentGrid[]})\n    // }\n    // if (direction === 'right') {\n    //  const nextPosition = copiedGrid.filter(\n    //      (cell) =>\n    //        cell.x === playerPosition.x+1 && cell.y === playerPosition.y\n    //  )[0];\n    //  console.log(nextPosition);\n    // }\n    // if (direction === 'left') {\n    //  const nextPosition = copiedGrid.filter(\n    //      (cell) =>\n    //        cell.x === playerPosition.x-1 && cell.y === playerPosition.y+1\n    //  )[0];\n    //  console.log(nextPosition);\n    // }\n    // if (direction === 'up') {\n    //  const nextPosition = copiedGrid.filter(\n    //      (cell) =>\n    //        cell.x === playerPosition.x && cell.y === playerPosition.y-1\n    //  )[0];\n    //  console.log(nextPosition);\n    // }\n    /*         handleChange: function (e) {\n            item = this.state.items[1];\n            item.name = 'newName';\n            items[1] = item;\n         \n            this.setState({items: items});\n         } */\n  };\n  countPoints = () => {};\n  render() {\n    console.log(\"heeeergeyguya\");\n    return (\n      <React.Fragment>\n        {/* <PlayerInfos/> */}\n        <KeyListener\n          currentGrid={this.state.currentGrid}\n          movePlayer={this.movePlayer}\n        />\n        {this.state.step === 1 && <DinoPicker setPlayer={this.setPlayer} />}\n        {this.state.step === 2 && (\n          <div className=\"smallGameContainer\">\n            <div className=\"playerInfoContainer\">*here user info*</div>\n            <div className=\"board\">\n              {this.state.currentGrid.length &&\n                this.state.currentGrid.map((cell, i) => {\n                  return <Cell player={cell.player} key={i} cell={cell} />;\n                })}\n            </div>\n            <div className=\"scoreContainer\">*here your score*</div>\n          </div>\n        )}\n        {this.state.step === 3 && <Result />}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}