{"ast":null,"code":"import _objectWithoutProperties from \"/Users/clarabesset/Documents/front dino/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/clarabesset/Documents/front dino/src/auth/ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthConsumer } from \"./Guard\"; // below : use of the rest parameter\n\n/* \n@mdn : A function's last parameter can be prefixed with \"...\"\nwhich will cause all remaining (user supplied) arguments to be placed within a \"standard\" javascript array. \nOnly the last parameter can be a \"rest parameter\".\n*/\n\nconst ProtectedRoute = (_ref) => {\n  let Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(AuthConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, ({\n    loginStatus\n  }) => React.createElement(Route, Object.assign({\n    render: props => {\n      return loginStatus ? React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: \"/signin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      });\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  })));\n};\n\nexport default ProtectedRoute;","map":{"version":3,"sources":["/Users/clarabesset/Documents/front dino/src/auth/ProtectedRoute.jsx"],"names":["React","Route","Redirect","AuthConsumer","ProtectedRoute","Component","component","rest","loginStatus","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,YAAT,QAA6B,SAA7B,C,CAEA;;AACA;;;;;;AAKA,MAAMC,cAAc,GAAG;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACrB,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEC,KAAK,IAAI;AACf,aAAOD,WAAW,GAChB,oBAAC,SAAD,oBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADgB,GAGd,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ;AAKD;AAPH,KAQMF,IARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADqB;AAAA,CAAvB;;AAiBA,eAAeH,cAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthConsumer } from \"./Guard\";\n\n// below : use of the rest parameter\n/* \n@mdn : A function's last parameter can be prefixed with \"...\"\nwhich will cause all remaining (user supplied) arguments to be placed within a \"standard\" javascript array. \nOnly the last parameter can be a \"rest parameter\".\n*/\nconst ProtectedRoute = ({ component: Component, ...rest }) => (\n  <AuthConsumer>\n    {({ loginStatus }) => (\n      <Route\n        render={props => {\n          return loginStatus ? (\n            <Component {...props} />\n          ) : (\n              <Redirect to=\"/signin\" />\n            );\n        }}\n        {...rest} // pass all passed (rest) argument(s) in a literal object to the Route\n      />\n    )}\n  </AuthConsumer>\n);\n\nexport default ProtectedRoute;"]},"metadata":{},"sourceType":"module"}